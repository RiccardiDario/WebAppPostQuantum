# Build Arguments
ARG ALPINE_VERSION=3.21
ARG OPENSSL_TAG=openssl-3.4.0
ARG LIBOQS_TAG=0.12.0
ARG OQSPROVIDER_TAG=0.8.0
ARG NGINX_VERSION=1.27.3
ARG BASEDIR="/opt"
ARG INSTALLDIR=${BASEDIR}/nginx

# Algoritmi supportati
ARG DEFAULT_GROUPS=x25519:x448:prime256v1:secp384r1:secp521r1:mlkem512:mlkem768:mlkem1024:X25519MLKEM768:SecP256r1MLKEM768

# STAGE 1: Build Nginx con OpenSSL OQS
FROM alpine:${ALPINE_VERSION} AS builder
ARG OPENSSL_TAG
ARG LIBOQS_TAG
ARG OQSPROVIDER_TAG
ARG NGINX_VERSION
ARG BASEDIR
ARG INSTALLDIR
ARG DEFAULT_GROUPS
ARG OSSLDIR=${BASEDIR}/openssl/.openssl

# Installazione pacchetti necessari
RUN apk update && apk --no-cache add \
    build-base linux-headers libtool automake autoconf make cmake ninja \
    git wget pcre-dev openssl openssl-dev

WORKDIR /opt

# Scarica i sorgenti
RUN git clone --depth 1 --branch ${LIBOQS_TAG} https://github.com/open-quantum-safe/liboqs \
    && git clone --depth 1 --branch ${OQSPROVIDER_TAG} https://github.com/open-quantum-safe/oqs-provider.git \
    && git clone --depth 1 --branch ${OPENSSL_TAG} https://github.com/openssl/openssl.git \
    && wget -q nginx.org/download/nginx-${NGINX_VERSION}.tar.gz \
    && tar -zxf nginx-${NGINX_VERSION}.tar.gz \
    && rm nginx-${NGINX_VERSION}.tar.gz

# Build liboqs
WORKDIR /opt/liboqs/build
RUN cmake -G"Ninja" -DOQS_DIST_BUILD=ON -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX="${INSTALLDIR}" .. \
    && ninja -j"$(nproc)" && ninja install

# Build Nginx con OpenSSL OQS
WORKDIR /opt/nginx-${NGINX_VERSION}
RUN ./configure --prefix=${INSTALLDIR} \
    --with-debug --with-http_ssl_module \
    --with-openssl=/opt/openssl --without-http_gzip_module \
    && make -j"$(nproc)" && make install

# Configura OpenSSL per OQS-Provider
RUN mkdir -p ${OSSLDIR}/ssl \
    && cp /opt/openssl/apps/openssl.cnf ${OSSLDIR}/ssl/ \
    && sed -i "s/default = default_sect/default = default_sect\noqsprovider = oqsprovider_sect/g" ${OSSLDIR}/ssl/openssl.cnf \
    && sed -i "s/\[default_sect\]/\[default_sect\]\nactivate = 1\n\[oqsprovider_sect\]\nactivate = 1\n/g" ${OSSLDIR}/ssl/openssl.cnf \
    && sed -i "s/providers = provider_sect/providers = provider_sect\nssl_conf = ssl_sect\n\n\[ssl_sect\]\nsystem_default = system_default_sect\n\n\[system_default_sect\]\nGroups = \$ENV\:\:DEFAULT_GROUPS\n/g" ${OSSLDIR}/ssl/openssl.cnf \
    && sed -i "s/HOME\t\t\t= ./HOME\t\t= .\nDEFAULT_GROUPS\t= ${DEFAULT_GROUPS}/g" ${OSSLDIR}/ssl/openssl.cnf

# Build e installa OQS-Provider
WORKDIR /opt/oqs-provider
RUN ln -s "/opt/nginx/include/oqs" "${OSSLDIR}/include" \
    && cmake -DCMAKE_BUILD_TYPE=Debug -DOPENSSL_ROOT_DIR="${OSSLDIR}" -DCMAKE_PREFIX_PATH="${INSTALLDIR}" -S . -B build \
    && cmake --build build \
    && MODULESDIR=$(find "${OSSLDIR}" -name ossl-modules) \
    && export MODULESDIR \
    && cp build/lib/oqsprovider.so "${MODULESDIR}" \
    && mkdir -p "${OSSLDIR}/lib64" \
    && ln -s "${OSSLDIR}/lib/ossl-modules" "${OSSLDIR}/lib64"

# Minimizzazione immagine
WORKDIR ${INSTALLDIR}
ENV PATH="${INSTALLDIR}/sbin:${OSSLDIR}/bin:${PATH}"

RUN set -ex && \
    strip "${OSSLDIR}/lib/"*.a "${OSSLDIR}/lib64/ossl-modules/oqsprovider.so" "${INSTALLDIR}/sbin/"*

# STAGE 2: Creazione immagine finale
FROM alpine:${ALPINE_VERSION}
ARG INSTALLDIR
ARG BASEDIR
ARG OSSLDIR=${BASEDIR}/openssl/.openssl

# Installa dipendenze necessarie per eseguire Nginx
RUN apk update && apk --no-cache add pcre-dev

# Copia solo i file necessari dal builder
COPY --from=builder ${INSTALLDIR} ${INSTALLDIR}
COPY --from=builder ${OSSLDIR} ${OSSLDIR}
COPY nginx-conf/ ${INSTALLDIR}/nginx-conf

# Link ai log per Docker logging
RUN ln -sf /dev/stdout "${INSTALLDIR}/logs/access.log" \
    && ln -sf /dev/stderr "${INSTALLDIR}/logs/error.log"

# Porta da esporre (assicurati che sia la stessa configurata in nginx.conf)
EXPOSE 4433

# Settaggio di OpenSSL per caricare la configurazione OQS
ENV PATH="${INSTALLDIR}/sbin:${PATH}" \
    OPENSSL_CONF="${OSSLDIR}/ssl/openssl.cnf"

# Creazione utente non-root
RUN addgroup -g 1000 -S oqs \
 && adduser --uid 1000 -S oqs -G oqs \
 && chown -R oqs:oqs "${INSTALLDIR}"

# Esegui come utente non-root
USER oqs
STOPSIGNAL SIGTERM
CMD ["nginx", "-c", "nginx-conf/nginx.conf", "-g", "daemon off;"]
