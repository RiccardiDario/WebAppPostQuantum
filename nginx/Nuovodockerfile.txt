# First: global build arguments:

# define the alpine image version to use
ARG ALPINE_VERSION=3.20

# Multi-stage build: First the full builder image
FROM alpine:3.20 AS intermediate

# Prendi gli argomenti globali
ARG OPENSSL_TAG=openssl-3.4.0
ARG LIBOQS_TAG=0.12.0
ARG OQSPROVIDER_TAG=0.8.0
ARG BASEDIR="/opt"
ARG LIBOQS_BUILD_DEFINES="-DOQS_DIST_BUILD=ON"
ARG INSTALLDIR="/opt/nginx"
ARG NGINX_VERSION=1.27.2
ARG MAKE_DEFINES="-j 18"

# Installazione di tutti i pacchetti necessari
RUN apk add --no-cache build-base linux-headers \
            libtool automake autoconf cmake ninja \
            make \
            openssl openssl-dev \
            git wget pcre-dev

# Ottenere le sorgenti necessarie
WORKDIR /opt
RUN git clone --depth 1 --branch ${LIBOQS_TAG} https://github.com/open-quantum-safe/liboqs && \
    git clone --depth 1 --branch ${OQSPROVIDER_TAG} https://github.com/open-quantum-safe/oqs-provider.git && \
    git clone --depth 1 --branch ${OPENSSL_TAG} https://github.com/openssl/openssl.git && \
    wget nginx.org/download/nginx-${NGINX_VERSION}.tar.gz && tar -zxvf nginx-${NGINX_VERSION}.tar.gz

# Build liboqs
WORKDIR /opt/liboqs
RUN mkdir build && cd build && cmake -G"Ninja" ${LIBOQS_BUILD_DEFINES} -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=${INSTALLDIR} .. && ninja && ninja install

# Build nginx
WORKDIR /opt/nginx-${NGINX_VERSION}
RUN ./configure --prefix=${INSTALLDIR} \
                --with-debug \
                --with-http_ssl_module --with-openssl=/opt/openssl \
                --without-http_gzip_module && \
    make ${MAKE_DEFINES} && make install

# Build oqsprovider
WORKDIR /opt/oqs-provider
RUN ln -s /opt/nginx/include/oqs /opt/openssl/.openssl/include && \
    rm -rf build && \
    cmake -DCMAKE_BUILD_TYPE=Debug -DOPENSSL_ROOT_DIR=/opt/openssl/.openssl -DCMAKE_PREFIX_PATH=${INSTALLDIR} -S . -B build && \
    cmake --build build && \
    cp build/lib/oqsprovider.so /opt/openssl/.openssl/lib/ossl-modules

# Ottimizzare
RUN strip /opt/openssl/.openssl/lib/*.a /opt/openssl/.openssl/lib/ossl-modules/oqsprovider.so /opt/nginx/sbin/*

# Verifica del binario nginx
RUN echo "Verifica della directory /opt/nginx/sbin:" && ls -l /opt/nginx/sbin

# Second stage
FROM alpine:3.20

# Installare solo le dipendenze necessarie per eseguire Nginx
RUN apk add --no-cache pcre-dev

# Copia i binari dal primo stage
COPY --from=intermediate /opt/nginx /opt/nginx
COPY --from=intermediate /opt/openssl/.openssl /opt/openssl/.openssl

# Copia il file nginx.conf dal contesto build alla directory corretta
COPY nginx.conf /opt/nginx/nginx-conf/nginx.conf

# Imposta il PATH corretto
ENV PATH="/opt/nginx/sbin:$PATH"

# Verifica durante la fase finale
RUN echo "Controllo del PATH finale: $PATH" && echo "Contenuto di /opt/nginx/sbin:" && ls -l /opt/nginx/sbin

WORKDIR /opt/nginx

# Creare un utente per eseguire Nginx in modo sicuro
RUN addgroup -g 1000 -S oqs && adduser --uid 1000 -S oqs -G oqs && chown -R oqs:oqs /opt/nginx
USER oqs

# Verifica finale prima del comando
CMD ["sh", "-c", "echo PATH: $PATH && ls -l /opt/nginx/nginx-conf && nginx -c /opt/nginx/nginx-conf/nginx.conf -g 'daemon off;'"]