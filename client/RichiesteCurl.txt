Comandi curl
Effettua una richiesta HTTPS utilizzando TLS 1.3, senza verificare i certificati del server
curl --tlsv1.3 -k https://nginx_pq:4433

Effettua una richiesta HTTPS utilizzando TLS 1.3 e kem specifico, senza verificare i certificati del server
curl --tlsv1.3 --curves x25519_mlkem512 -k  https://nginx_pq:4433

Effettua una richiesta HTTPS utilizzando TLS 1.3, verificando il certificato del server con una CA specifica
curl --tlsv1.3 --cacert /opt/certs/CA.crt -v https://nginx_pq:4433

Effettua una richiesta HTTPS utilizzando TLS 1.3 e un kem specifico kyber512 verificando il certificato del server
curl --tlsv1.3 --curves kyber512 --cacert /opt/certs/CA.crt -v https://nginx_pq:4433

Comando per analizzare il traffico all'interno del container del client:
tshark -r /app/pcap/capture.pcap -q -z conv,tcp


Il motivo della discrepanza che stai osservando (cioè, il fatto che nella cattura Wireshark risultano più byte scambiati rispetto ai log di trace di curl) è legato principalmente alla natura stessa dei dati che stai confrontando.

Cosa sta succedendo esattamente?

Log di Curl
Il log di curl mostra esclusivamente i dati applicativi effettivamente scambiati all'interno della connessione TLS. In altre parole, curl mostra soltanto i dati applicativi (richieste HTTP, risposte HTTP e handshake TLS), escludendo completamente i dati relativi al livello inferiore della pila TCP/IP, come gli header TCP, IP, ed Ethernet.

Cattura PCAP di Wireshark (tshark)
Al contrario, il risultato della cattura Wireshark (comando tshark -r capture.pcap -z conv,tcp) mostra il numero totale di byte scambiati a livello TCP, includendo quindi:

Dati applicativi (che è ciò che vedi anche in curl)
Header TCP (che aggiungono circa 20 byte per pacchetto)
Header IP (20 bytes per pacchetto se IPv4)
Header Ethernet (14 bytes per pacchetto)
Handshake TCP (SYN, ACK) e TLS Handshake
Quindi, i dati mostrati da tshark includono tutto il traffico di rete necessario per stabilire la connessione, mantenerla aperta, e anche terminare la connessione (chiusura con FIN), oltre a eventuali ritrasmissioni dovute a perdita pacchetti.

Esempio pratico:
Log Curl:

Curl mostra esclusivamente il payload dell'applicazione TLS (esempio: invio "Client Hello", ricezione certificato, etc.), omettendo tutti gli header inferiori (TCP, IP, Ethernet).
Wireshark (tshark):

22 26 kB indica che la sorgente ha inviato 26 kilobytes complessivi (payload + overhead di protocolli inferiori).
24 4418 bytes indica il traffico in senso opposto.
Pertanto, è del tutto normale che tshark mostri più dati rispetto al trace di curl.

Come procedere per un'analisi corretta:
Se vuoi confrontare esattamente il payload applicativo (il contenuto puro della trasmissione) devi usare dei filtri più specifici in Wireshark/tshark, come ssl.record.length o tls.record.length.
Se invece ti interessa il traffico totale effettivamente generato dalla connessione, considera il valore dato dalla cattura Wireshark/tshark, includendo anche gli overhead dei protocolli.
Questa discrepanza non è un errore, bensì è attesa e naturale.