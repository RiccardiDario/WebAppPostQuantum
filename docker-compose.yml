networks:
  custom_network:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.1.0/24

volumes:
  certs-volume:
  output-volume:

services:
  app:
    build:
      context: ./app
    container_name: flask_app
    ports:
      - "5000:5000"
    volumes:
      - ./app:/app
    networks:
      - custom_network

  cert-generator:
    image: openquantumsafe/oqs-ossl3:latest
    container_name: cert-generator
    volumes:
      #- ./certs:/certs
      - certs-volume:/certs
      - ./scripts/generate_certs.sh:/generate_certs.sh
      - ./utils/openssl.cnf:/openssl.cnf
    stdin_open: true
    env_file:
      - ./utils/.env
    tty: true
    entrypoint: >
      sh -c "/bin/sh /generate_certs.sh"
    networks:
      - custom_network

  nginx:
    image: openquantumsafe/nginx:latest
    container_name: nginx_pq
    ports:
      - "4433:4433"
    volumes:
      #- ./certs:/opt/nginx/certs
      - certs-volume:/opt/nginx/certs
      - ./utils/nginx.conf:/opt/nginx/nginx-conf/nginx.conf
    depends_on:
      cert-generator:
        condition: service_completed_successfully
    networks:
      custom_network:
        ipv4_address: 192.168.1.100

  curl:
    image: openquantumsafe/curl:latest
    container_name: pq_curl
    depends_on:
      - nginx
    volumes:
      #- ./secrets:/secrets
      #- ./certs:/opt/certs
      - certs-volume:/opt/certs
      - ./output:/output
      #- output-volume:/output
      - ./scripts/performance_test.sh:/performance_test.sh
    user: root
    entrypoint: >
      sh -c "apk add --no-cache iftop &&
             /bin/sh /performance_test.sh"
    networks:
      - custom_network

  #wireshark:
    #image: openquantumsafe/wireshark:latest
    #container_name: pq_wireshark
    #network_mode: "host"
    #environment:
      #- DISPLAY=host.docker.internal:0.0
    #volumes:
      #- /tmp/.X11-unix:/tmp/.X11-unix 
      #- ./pcap:/pcap
    #stdin_open: true
    #tty: true
    #command: >
      #wireshark -k -i any -f "tcp port 4433 and host 192.168.1.100" -w /pcap/capture.pcap
