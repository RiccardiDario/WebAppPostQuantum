services:
  cert-generator:
    image: openquantumsafe/oqs-ossl3:latest
    container_name: cert-generator
    volumes:
      - ./certs:/certs
      - ./utils/generate_certs.sh:/generate_certs.sh
      - ./utils/openssl.cnf:/openssl.cnf
    stdin_open: true
    tty: true
    entrypoint: ["/bin/sh", "/generate_certs.sh"]
    env_file:
      - ./utils/.env

  app:
    build:
      context: ./app
    container_name: flask_app
    ports:
      - "5000:5000"
    volumes:
      - ./app:/app

  nginx:
    image: openquantumsafe/nginx:latest
    container_name: nginx_pq
    ports:
      - "4433:4433"
    volumes:
      - ./utils/nginx.conf:/opt/nginx/nginx-conf/nginx.conf
      - ./certs:/opt/nginx/certs
    depends_on:
      cert-generator:
        condition: service_completed_successfully

  curl:
    image: openquantumsafe/curl:latest
    container_name: pq_curl
    depends_on:
      - nginx
    volumes:
      - ./certs:/opt/certs
      - ./output:/output
    entrypoint: >
      sh -c "curl --tlsv1.3 --curves x25519_mlkem512 --cacert /opt/certs/CA.crt -v https://nginx_pq:4433 > /output/curl_output.txt 2>&1 &&
             awk '/^\\*/ {print \"- \" substr(\$0, 3)}' /output/curl_output.txt > /output/curl_report.md &&
             echo '\n## HTTP Response' >> /output/curl_report.md &&
             awk '/^< / {print \"- \" substr(\$0, 3)}' /output/curl_output.txt >> /output/curl_report.md &&
             tail -f /dev/null"
  
  wireshark:
    image: openquantumsafe/wireshark:latest
    container_name: pq_wireshark
    environment:
      - DISPLAY=host.docker.internal:0.0  # Specifica il display per X11 su Windows
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix  # Forwarding X11
      - ./pcap:/pcap  # Per salvare i file di cattura
    stdin_open: true
    tty: true
    command: >
      wireshark -k -i any -w /pcap/capture.pcap
