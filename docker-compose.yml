networks:
  custom_network:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.1.0/24

volumes:
  certs-volume:
  output-volume:

services:
  server:
    build:
      context: ./server
    container_name: flask_app
    ports:
      - "5000:5000"
    networks:
      - custom_network

  cert-generator:
    image: openquantumsafe/oqs-ossl3:latest
    container_name: cert-generator
    volumes:
      - ./certs:/certs
      - ./cert-generator:/cert-generator
    stdin_open: true
    env_file:
      - ./cert-generator/.env
    tty: true
    entrypoint: >
      sh -c "/bin/sh /cert-generator/generate_certs.sh "
    networks:
      - custom_network

  nginx:
    build:
      context: ./nginx
    container_name: nginx_pq
    ports:
      - "4433:4433"
    volumes:
      - ./certs:/etc/nginx/certs/
      - ./output:/opt/nginx/output
    privileged: true
    networks:
      custom_network:
        ipv4_address: 192.168.1.100

  client-analysis:
    build:
      context: ./client
    container_name: client_analysis
    volumes:
      - ./output:/app/output
      - ./certs:/opt/certs
      - ./tls_keys:/tls_keys
    depends_on:
      - nginx
    networks:
      - custom_network
    stdin_open: true
    cap_add:
      - NET_ADMIN
      - NET_RAW
    tty: true
    environment:
      - SSLKEYLOGFILE=/tls_keys/tls-secrets.log

  wireshark:
    image: openquantumsafe/wireshark:latest
    container_name: pq_wireshark
    network_mode: "host"
    environment:
      - DISPLAY=host.docker.internal:0.0
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix 
      - ./pcap:/pcap
    stdin_open: true
    tty: true
    command: >
      wireshark -k -i any -f "tcp port 4433 and host 192.168.1.100" -w /pcap/capture.pcap